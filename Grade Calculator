// GPAAna.cpp
// Tuaha Khan, CISP 400
// 2/20/22

#include <cmath>
#include <cstring>
#include <iomanip>
#include <iostream>

using namespace std;

// Specification A1 - Date class
class Date {
private:
  int month, // int variables for month day and year
      day, year;

public:
  void todaysDate(int, int, int);
  void displayDate();
  void dateTest();
};

// Specification A3 - Component Test Method in Date
void Date::dateTest() {
  cout << "Date Test:\n" << endl;
  if (month != 2 || day != 20 ||
      year != 2022) { // checks to see if date is correct
    cout << "Incorrect Date. Test Failed." << endl;
    cout << "Expected Date: 2/20/2022" << endl;
  } else {
    cout << "Correct Date. Test Passed." << endl;
  }
}

void Date::displayDate() { cout << month << "/" << day << "/" << year << endl; }

void Date::todaysDate(int m, int d, int yr) { // allows you to set todays date
  month = m;
  day = d;
  year = yr;
}

// Function Prototype
void programGreeting();
void menu();
string gradeCheck(double score);
void gradeConvTest();

int main() {
  int size = 0; // array size
  // Specification B1 - Dynamic Array
  double *scores = nullptr;
  scores = new double[size]; // dynamic array for test scores
  double *tempArr = nullptr; // pointer to temporarily hold test scores
  bool validInput;           // checks for input validation
  int choice;                // int for user input
  double sum = 0;            // sum of test scores
  int id;                    // int for student id
  double score;              // double for test scores

  Date d;
  // Specification A2 - External date initialization
  d.todaysDate(2, 20, 2022); // initializes ints to todays date

  // d.displayDate(); //displays todays date

  programGreeting(); // displays program greeting

  // gradeConvTest(); //tests score to letter conversion

  // d.dateTest(); //tests date

  cout << "\nEnter Student ID: " << endl;
  cin >> id; // prompts user to enter student id

  bool running = true;
  bool gradeInput;

  while (running) {

    menu(); // prompts user with menu
    cin >> choice;

    validInput = true;

    while (validInput) {
      // Specification B3 - Menu Input Validation
      if (cin.fail()) { // checks if user has entered a value between 1-4
        cout << "Please choose from 1-4." << endl;
        cin.clear();
        cin.ignore();
        cin >> choice;
      }

      else if (choice == 1) {

        cout << "Enter Test Score: " << endl;
        cin >> score; // takes user input of score
        // Specification B2 - Add Elements
        size++; // increases size of array every time score is added

        gradeInput = true; // checks for valid grade input

        while (gradeInput) {
          if (cin.fail()) { // chceks that user has entered score greater than 0
            cout << "Error. Try again." << endl;
            cin.clear();
            cin.ignore();
            cin >> score;
          } else if (score < 0) {
            cout << "Error. Enter score higher than 0." << endl;
            cin >> score;
          } else if (score >= 0) {
            gradeInput = false; // exits while loop
          } else {
            cout << "Error. Try again." << endl;
            cin.clear();
            cin.ignore();
            cin >> score;
          }
        }

        tempArr = new double[size]; // creates temporary array

        for (int i = 0; i < size; i++) {
          tempArr[i] = scores[i]; // stores each score from score array to
                                  // temporary array
        }

        tempArr[size - 1] = score;

        delete[] scores;   // deletes array
        scores = tempArr;  // switches old array to new array
        tempArr = nullptr; // rests temporary array

        validInput = false; // exits while loop
      } else if (choice == 2) {
        // Specification C2 - Print Scores
        cout << "Student " << id << "'s Grades: " << endl;
        cout << "--------------------" << endl;
        cout << "#     Score    Grade"
             << endl; // displays students grades in columns and rows
        for (int i = 0; i < size; i++) {
          // Specification C3 - Letter Grades
          cout << i << "     " << scores[i] << "        "
               << gradeCheck(scores[i]) << endl;
        }

        validInput = false; // exits while loop and returns to menu
      }

      else if (choice == 3) {
        // Specification C4 - Compute GPA
        for (int i = 0; i < size; i++) {
          sum += scores[i]; // adds each element of array to int sum
        }

        // Specification B4 - Print Letter Grade
        cout << "Student " << id << "'s average grade: " << sum / size << "  ("
             << gradeCheck(sum / size) << ")\n"
             << endl; // prints gpa (sum divided by size of array) and letter
                      // grade

        validInput = false; // exits while loop and returns to menu
      }

      else if (choice == 4) {
        cout << "Goodbye!" << endl;
        return 0; // exits program
      }

      else {
        cout << "Please choose from 1-4." << endl;
        cin.clear();
        cin.ignore();
        cin >> choice;
      }
    }
  }
}

// function that displays menu for user
void menu() {
  cout << "1. Add Grade\n2. Display All Grades\n3. Process All Grades\n4. Quit "
          "Program\n"
       << endl;
}

// assigns letter grade to each score
string gradeCheck(double score) {
  if (score >= 90) {
    return "A";
  } else if (score >= 80 && score <= 89) {
    return "B";
  } else if (score >= 70 && score <= 79) {
    return "C";
  } else if (score >= 60 && score <= 69) {
    return "D";
  } else if (score >= 0 && score < 60) {
    return "F";
  } else {
    return "Err"; // checks that grade is not less than 0
  }
}

// Specification C1 - Program Greeting Function
void programGreeting() {
  cout << "Welcome to the Grade Calculator!\nTuaha Khan\n" << endl;
  cout
      << "Enter in each one of your test scores, and this program will assingn "
         "a letter grade to each one, as well as calcuate your average grade."
      << endl;
}

// Specification A4 - Component Test Grade Conversion
void gradeConvTest() {
  cout << "Letter Grade Tests:\n" << endl;
  int score[] = {0, 60, 70, 80, 90, 101, -1}; // array of scores to test
  string letterGrades[] = {"F", "D", "C",  "B",
                           "A", "A", "Err"}; // array of letter grades to test
  for (int i = 0; i < 7; i++) {
    cout << "Student Score: " << score[i] << endl;
    cout << "Expected Grade: " << letterGrades[i] << endl;
    cout << "Actual Grade: " << gradeCheck(score[i]) << endl;

    if (letterGrades[i] ==
        gradeCheck(score[i])) { // checks that actual grade is same as expected
      cout << "Test Passed!\n" << endl;
    } else {
      cout << "Test Failed!\n" << endl;
    }
  }
}
