
#include <iostream> // instream and outstream
#include <iomanip> // format output streams
#include <new> // allocate and deallocate
#include <string> // Use of string class
#include <ctime> // For system date
#include <cstdlib> // for rand

using namespace std;

// Global Constants
const int xDim = 10, yDim = 10;
const int popSize = 200;
const int generations = 500;

// Enum Data Types
enum State { EMPTY = 0, BATTERY, WALL, ROBOT }; /* Describes grid state: EMPTY = 0, BATTERY = 1, ROBOT = 2, WALL = 3 */
enum RobotAction { NORTH = 0, SOUTH, EAST, WEST, CHANCE}; /* Describes particular actions a robot can take in their genes */

/* Enum Operator Overloading */
ostream &operator<<(ostream &out, State output)
// Output the States in string form
{
    if(output == EMPTY)
        out << "EMPTY";
    else if(output == BATTERY)
        out << "BATTERY";
    else if(output == ROBOT)
        out << "ROBOT";
    else if(output == WALL)
        out << "WALL";
    
    return out;
}
ostream &operator<<(ostream &out, RobotAction output)
// Output each RobotAction in user understandable form
{
    if(output == NORTH)
        out << "Move North";
    else if (output == SOUTH)
        out << "Move South";
    else if (output == EAST)
        out << "Move East";
    else if (output == WEST)
        out << "Move West";
    else
        out << "Move in a random direction";

    return out;
}

/* Enum toString method Overloading */
string to_string(State in)
// Define to_string mehtod for State Enum
{
    string out = "";
    switch(in)
    {
        case(EMPTY):
        {
            out = "EMPTY";
            break;
        }
        case(BATTERY):
        {
            out = "BATTERY";
            break;
        }
        case(ROBOT):
        {
            out = "ROBOT";
            break;
        }
        case(WALL):
        {
            out = "WALL";
            break;
        }
    }
    return out;
}
string to_string(RobotAction in)
{
// Define to_string method for RobotAction enum
    string out;
    switch(in)
    {
        case(NORTH):
        {
            out = "Move North";
            break;
        }
        case(SOUTH):
        {
            out = "Move South";
            break;
        }
        case(EAST):
        {
            out = "Move East";
            break;
        }
        case(WEST):
        {
            out = "Move West";
            break;
        }
        case(CHANCE):
        {
            out = "Move in a random direction";
            break;
        }
    }
    return out;
}

// Class Declarations
class Robot
// Robot with genes and sensors that eats batteries 
{
 private: 
    // Primitive Private Variables
    string name = "";
    bool active = true;
    int power = 5;
    int survivalTime = 0; // increment every successful turn
    int genes[16][5]; // 16 genes - N,S,E,W,

    // Primitive Private Variable Getters/Setters
 
 public:
    Robot();
    Robot(const Robot& robo);
    int getAge() { return survivalTime; }
    int getRoboPower() { return power; }
    string getName() { return name; }
    void setName(string newName) { name = newName; }
    void consumePower();
    void obtainBattery() { power += 5; }
    void survived() { survivalTime++; }
    bool isActive() { return active; }
    void activate() { active = true; }
    void deactivate() { active = false; }
    RobotAction geneMatch(int nSensor, int sSensor, int eSensor, int wSensor);
    Robot& operator=(const Robot& right);

 friend ostream &operator<<(ostream& out, Robot& output);
 friend Robot operator+(const Robot& first, const Robot& second);
};

class Map
// Defines a grid of states and gives associated functions for a single instance of a Robot object interacting with such grid
{
 private:
    State grid[yDim][xDim];
    Robot simRobo;
    int xRoboLoc, yRoboLoc;
    State sensorN, sensorS, sensorE, sensorW; // 4 senors to detect spaces around robot
 public:
    Map();
    Map(const Map& copyMap);
    void populateMap();
    void printMapDetails();
    void updateRobotSensors();
    void mapTurn();
    int getSurvivalTime() { return simRobo.getAge(); }
    int getPower() { return simRobo.getRoboPower(); }
    string getRoboName() { return simRobo.getName(); }
    void setRoboName(string givenName ) { simRobo.setName(givenName); }
    Map& operator=(const Map& right);
 
 friend ostream &operator<<(ostream &out, Map &display);
 friend Map operator+(const Map& first, const Map& second);
};

class Sim
// Creates multiple instances of robot behavior on multiple maps. Oversees those robot and map interactions. 
{
 private: 
    Map simulations[popSize];
    int currAvgFitness;
    int topFitness;
    void swap(Map* x, Map* y);
 public:
    Sim();
    void updateFitness();
    void sortSims(Map* arr, int num);
    void simulateGeneration();
    void breedGeneration();
    int getGenFitness() { return currAvgFitness; }
    int getGenTop() { return topFitness; }
};


// Class Definitions
/* Robot class implementation */
Robot::Robot()
// Constructor for robotic sensor
{
    // Randomly generate genes on startup
    for(int i = 0; i < 16; i++)
    {
        for(int j = 0; j < 4; j++)
        {
            genes[i][j] = rand()%3; // Robot starts with random potential grid states
        }
        genes[i][4] = rand()%5; // Robot starts with random potential action based on given grid states
    }
}
Robot::Robot(const Robot& robo)
// Overloaded copy constructor that uses another object's values as initialization for a new object
{
    name = robo.name;
    active = robo.active;
    power = robo.power;
    survivalTime = robo.survivalTime;
    for(int i = 0; i < 16; i++) // loops through setting left robot's genes equal to right robot's genes
    {
        for(int j = 0; j < 5; j++)
        {
            genes[i][j] = robo.genes[i][j];
        }
    }
}
void Robot::consumePower()
// Robot consumes 1 power bar unless robot is inactive or already has 0 power
{
    if(active == false)
        return;
    else if(power == 0)
    {
        active = false;
    }
    else
        power--;
}
RobotAction Robot::geneMatch(int nSensor, int sSensor, int eSensor, int wSensor)
// Check if any of robots genes match current sensor state
{
    RobotAction command = static_cast<RobotAction>(genes[15][4]); // Default to last action in genes
    for(int i = 0; i < 16; i++)
    {
        if(nSensor == genes[i][0] && sSensor == genes[i][1] && eSensor == genes[i][2] && wSensor == genes[i][3])
        {
            command = static_cast<RobotAction>(genes[i][4]);
            break;
        }
    }
    
    return command;
}
Robot operator+(const Robot& first, const Robot& second)
// Breed two robots with random mutation chance
{
    Robot addedRobo;

    // First half of addedRobo's genes are from first robot in equation
    for(int i = 0; i < 8; i++ )
    {
        for(int j = 0; j < 5; j++)
        {
            addedRobo.genes[i][j] = first.genes[i][j];
        }
    }

    // Second half of addedRobo's genes are from second robot in equation
    for(int i = 8; i < 16; i++ )
    {
        for(int j = 0; j < 5; j++)
        {
            addedRobo.genes[i][j] = second.genes[i][j];
        }
    }

    // Random gene mutation chance of 5%
    int mutationChance = (rand()%(100) + 1);
    if(mutationChance > 0 && mutationChance < 6)
    {
        addedRobo.genes[rand()%16][rand()%5] = rand()%4;
    }


    return addedRobo;
}
Robot& Robot::operator=(const Robot& right)
// Allow one to equate one Robot's stats to another's with the assignment operator
{
    name = right.name;
    active = right.active;
    power = right.power;
    survivalTime = right.survivalTime;
    for(int i = 0; i < 16; i++) // loops through setting left robot's genes equal to right robot's genes
    {
        for(int j = 0; j < 5; j++)
        {
            genes[i][j] = right.genes[i][j];
        }
    }

    // return current object
    return *this;
}
ostream &operator<<(ostream &out, Robot &output)
// Output details of a robot
{
    out << endl;

    // Output robot name first
    if(output.name == "")
        out << "Unnamed Robot" << endl;
    else
        out << "Name: " << output.name << endl;

    out << "Status: " << output.isActive() << endl; // 1 is on, 0 is off
    out << "Power: " << output.power << endl;
    out << "Survival Time: " << output.survivalTime << endl;

    // Output gene map
    out << "~~~~~~~~~~" << endl;
    out << "*Gene Map* " << endl;
    out << "~~~~~~~~~~" << endl;
    for(int i = 0; i < 16; i++)
    {
        string geneNum = "Gene " + to_string(i+1)  + ": ";
        out << left << setw(9) << geneNum;

        State nSensor = static_cast<State>(output.genes[i][0]);
        string nGene = string("<") + "NORTH SENSOR: " + to_string(nSensor) + "> ";
        out << left << setw(25) << nGene;

        State sSensor = static_cast<State>(output.genes[i][1]);
        string sGene = string("<") + "SOUTH SENSOR: " + to_string(sSensor) + "> ";
        out << left << setw(25) << sGene;

        State eSensor = static_cast<State>(output.genes[i][2]);
        string eGene = string("<") + "EAST SENSOR: " + to_string(eSensor) + "> ";
        out << left << setw(25) << eGene;

        State wSensor = static_cast<State>(output.genes[i][3]);
        string wGene = string("<") + "WEST SENSOR: " + to_string(wSensor) + "> ";
        out << left << setw(25) << wGene;

        RobotAction oAction = static_cast<RobotAction>(output.genes[i][4]);
        string actionGene = string("<") + "ACTION: " + to_string(oAction) + "> ";
        out << left << setw(25) << actionGene;
        
        out << endl;
    }

    return out;
}

/* Map class implementation */
Map::Map()
{
    this->populateMap();
    this->updateRobotSensors();


}
Map::Map(const Map& copyMap)
// Overloaded copy constructor. Uses another Map object's values to initialize a new Map object.
{
    // Copy map grids over
    for(int y = 0; y < yDim; y++)
    {
        for(int x = 0; x < xDim; x++)
        {
            this->grid[y][x] = copyMap.grid[y][x];
        }
    }
    // Robot copy over
    this->simRobo = copyMap.simRobo;
    this->xRoboLoc = copyMap.xRoboLoc;
    this->yRoboLoc = copyMap.yRoboLoc;
    this->sensorN = copyMap.sensorN;
    this->sensorS = copyMap.sensorS;
    this->sensorE = copyMap.sensorE;
    this->sensorW = copyMap.sensorW;

}
void Map::updateRobotSensors()
/* Update Robot's sensors*/
{
    // North sensor
    if(yRoboLoc - 1 < 0) // Check if above robot is out of bounds
    {
        sensorN = WALL;
    }
    else
        sensorN = grid[yRoboLoc - 1][xRoboLoc];
    // South sensor
    if(yRoboLoc + 1 > yDim - 1)
    {
        sensorS = WALL;
    }
    else
        sensorS = grid[yRoboLoc + 1][xRoboLoc];
    // East sensor
    if(xRoboLoc + 1 > xDim - 1)
    {
        sensorE = WALL;
    }
    else
        sensorE = grid[yRoboLoc][xRoboLoc + 1];
    // West sensor
    if(xRoboLoc - 1 < 0)
    {
        sensorW = WALL;
    }
    else 
        sensorW = grid[yRoboLoc][xRoboLoc - 1];
}
void Map::populateMap()
// Setup a brand new map for robotic evolution study
{
    // Start map off by making everything empty
    for(int y = 0; y < yDim; y++)
    {
        for(int x = 0; x < xDim; x++)
        {
            grid[y][x] = EMPTY;
        }
    }

    int batteries = 0;
    yRoboLoc = rand()%(yDim); // Which of ten arrays will the robot be in; Choosing a row; the y coordinate of the robot
    xRoboLoc = rand()%(xDim); // Which spot in a ten-slot array will the robot be in; Choosing a column; the x coordinate of the robot
    grid[yRoboLoc][xRoboLoc] = ROBOT;

    while(batteries < 40)
    {
        int yRandLoc = rand()%yDim;
        int xRandLoc = rand()%xDim;

        if(grid[yRandLoc][xRandLoc] == EMPTY)
        {
            grid[yRandLoc][xRandLoc] = BATTERY;
            batteries++;
        }
    }
}
void Map::mapTurn()
// Execute a move based on Robot's sensors and stats
{
    if(  !(simRobo.isActive())  )
    {
        simRobo.setName("dead");
        return;
    }

    // Make sure robot sensors are up to date with specifics of what's around it
    this->updateRobotSensors();
    RobotAction newMove = simRobo.geneMatch(sensorN, sensorS, sensorE, sensorW);
    // Switch case to decide what Robot should do based on what move it wants to do
    switch(newMove)
    {

        case(CHANCE):
        {
            // If newMove based on sensors is random choose a random direction and its entailed instructions
            int randChance = rand()%4;
            switch(randChance)
            {
                case(0):
                {
                    goto CNORTH;
                    break;
                }
                case(1):
                {
                    goto CSOUTH;
                    break;
                }
                case(2):
                {
                    goto CEAST;
                    break;
                }
                case(3):
                {
                    goto CWEST;
                    break;
                }
            }
        }

        // For each direction check for special cases such as a wall or battery
        // Need to update the grid as well as robot sensor
        case(NORTH):
        {
            CNORTH: 
            if(sensorN == WALL)
            {
                break;
            }
            else if(sensorN == BATTERY)
            {
                // Only increase robot power if space in sensor direction is battery
                simRobo.obtainBattery();  
            }
            // Robot will make same move if space is EMPTY or BATTERY
            grid[yRoboLoc][xRoboLoc] = EMPTY;
            yRoboLoc--;
            grid[yRoboLoc][xRoboLoc] = ROBOT;
            break;
        }
        case(SOUTH):
        {
            CSOUTH:
            if(sensorS == WALL)
            {
                break;
            }
            else if(sensorS == BATTERY)
            {
                simRobo.obtainBattery();
            }
            grid[yRoboLoc][xRoboLoc] = EMPTY;
            yRoboLoc++;
            grid[yRoboLoc][xRoboLoc] = ROBOT;
            break;
        }
        case(EAST):
        {
            CEAST:
            if(sensorE == WALL)
            {
                break;
            }
            else if(sensorE == BATTERY)
            {
                simRobo.obtainBattery();
            }
            grid[yRoboLoc][xRoboLoc] = EMPTY;
            xRoboLoc++;
            grid[yRoboLoc][xRoboLoc] = ROBOT;
            break;
        }
        case(WEST):
        {
            CWEST:
            if(sensorW == WALL)
            {
                break;
            }
            else if(sensorW == BATTERY)
            {
                simRobo.obtainBattery();
            }
            grid[yRoboLoc][xRoboLoc] = EMPTY;
            xRoboLoc--;
            grid[yRoboLoc][xRoboLoc] = ROBOT;
            break;
        }
    }

    // Update robot sensors
    this->updateRobotSensors();
    simRobo.survived();
    simRobo.consumePower();
}
ostream &operator<<(ostream &out, Map &display)
// Output stream operator prints out map of existing robot, batteries, and empty spaces
{
    out << endl; // create space between previous stream output and new map printout
    out << "\nMap:\n";
    for(int y = 0; y < yDim; y++)
    {
        for(int x = 0; x < xDim; x++)
        {
            /* A grid cell looks like this:
                EMPTY SLOT -> [ ]
                BATTERY SLOT -> [B]
                ROBOT SLOT -> [R]
            */
            out << "[";
            if(display.grid[y][x] == EMPTY)
            {
                out << " ";
            }
            if(display.grid[y][x] == BATTERY)
            {
                out << "B";
            }
            if(display.grid[y][x] == ROBOT)
            {
                out << "r";
            }
            out << "]";
        }
        out << endl; // End line once every xDim column in a yDim row is completed
    }
    out << endl;

    return out;
}
void Map::printMapDetails()
{
    cout << this->simRobo;
    cout << *this;
}
Map operator+(const Map& first, const Map& second)
// Combines two Map objects' robots but creates completely new grid 
{
    Map newMap;
    newMap.simRobo = first.simRobo + second.simRobo;
    newMap.populateMap();
    newMap.updateRobotSensors();

    return newMap;
}
Map& Map::operator=(const Map& right)
// Copies another map's stats into a new map
{
    // Copy map grids over
    for(int y = 0; y < yDim; y++)
    {
        for(int x = 0; x < xDim; x++)
        {
            this->grid[y][x] = right.grid[y][x];
        }
    }
    // Robot copy over
    this->simRobo = right.simRobo;
    this->xRoboLoc = right.xRoboLoc;
    this->yRoboLoc = right.yRoboLoc;
    this->sensorN = right.sensorN;
    this->sensorS = right.sensorS;
    this->sensorE = right.sensorE;
    this->sensorW = right.sensorW;

    return *this;
}

/* Sim class implementations */
Sim::Sim()
{
   for(int i = 0; i < popSize; i++)
   {
       Map newestSim;
       simulations[i] = newestSim;
   }
   this->updateFitness();
}
void Sim::swap(Map* x, Map* y)
// Helper funtion for sorting simulations
{
    Map temp = *x;
    *x = *y;
    *y = temp;
}
void Sim::updateFitness()
// Average map's robot power levels to find generational fitness
{
    int calculate = 0;
    this->sortSims(simulations, popSize);
    for(int i = 0; i < popSize; i++)
    {
        calculate += simulations[i].getPower();
    }
    currAvgFitness = (calculate/popSize);
    topFitness = simulations[popSize - 1].getPower();
}
void Sim::sortSims(Map* arr, int num)
// Bubble sort maps by robot power, lowest to highest
{
    int i, j;
    for(i = 0; i < num - 1; i++)
    {
        for(j = 0; j < num-i-1; j++)
        {
            if(arr[j].getPower() > arr[j+1].getPower())
            {
                swap(&arr[j], &arr[j+1]);
            }
        }
    }
}
void Sim::simulateGeneration()
// Run through all maps in array simulating a robot turn. Then order all robots by power rating
{
    for(int i = 0; i < popSize; i++)
    {
        simulations[i].mapTurn();
    }
    this->sortSims(simulations, popSize);
    this->updateFitness();
    
    cout << endl
         << "This generation's fitness/average power was: " << currAvgFitness << endl
         << "This generation's top fitness was: " << topFitness << endl;
    // Update on top robot
    cout << endl
         << "****************************************************\n"
         << "Here's some details on the top robot this generation\n"
         << "****************************************************\n"
         << endl;
    simulations[popSize-1].printMapDetails();
}

void Sim::breedGeneration()
// Kill lowest 50% of robots and breed top 50% to replace the fallen
// We assume array is presorted from lowest to highest
{
    for(int i = 0, j = popSize - 1; i < popSize/2 - 1; i+=2, j-=2)
    {
        simulations[i] = simulations[j] + simulations[j-1];
        simulations[i+1] = simulations[j-1] + simulations[j];
    }
}


// Function Prototypes
void ProgramGreeting();



int main()
{
    srand(time(0)); // Set random seed to current time
    ProgramGreeting();
    Sim evolutionTest;
    int avgFitnessTimeline[generations];
    int topFitnessTimeline[generations];
    int currGen = 0;

    for(int i = 0; i < generations; i++)
    {
        evolutionTest.simulateGeneration();
        avgFitnessTimeline[currGen] = evolutionTest.getGenFitness();
        topFitnessTimeline[currGen] = evolutionTest.getGenTop();
        evolutionTest.breedGeneration();
        currGen++;
    }

    // Graph out average fitnesses
    cout << endl << "Here's a table of the average fitness over time. Did evolution occur?" << endl;
    for(int i = 0; i < generations; i++)
    {
        cout << "Gen " << i << ": ";
        for(int j = 0; j < avgFitnessTimeline[i]; j++)
        {
            cout << " ";
        }
        cout << "#" << endl;
    }

    // Graph out top fitness
    cout << endl << "Here's a table of the top robot's fitness over time. Did evolution occur?" << endl;
    for(int i = 0; i < generations; i++)
    {
        cout << "Gen " << i << ": ";
        for(int j = 0; j < topFitnessTimeline[i]; j++)
        {
            cout << " ";
        }
        cout << "*" << endl;
    }


}



// Function Definitions
void ProgramGreeting()
// Intro Message
{
    cout << "**********************************************************************" << endl
         << "Welcome to Genetic Algorithm Robot Simulator - A Final Project" << endl
         << "This program was written by Amaan Mohammed and is due May 15, 2021" << endl
         << "This program simulates evolution of a robot population" << endl
         << "**********************************************************************";
}
